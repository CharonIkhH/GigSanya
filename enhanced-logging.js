// enhanced-logging.js
(function() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const LOG_LEVELS = {
        DEBUG: 10,
        INFO: 20,
        WARNING: 30, 
        ERROR: 40,
        CRITICAL: 50
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
    const config = {
        minLevel: LOG_LEVELS.DEBUG,
        storeLogsInLocalStorage: true,
        maxLogEntries: 1000,
        sendLogsToServer: true,
        logEndpoint: '/api/logs',
        includeTimestamps: true,
        coloredOutput: true,
        prefix: 'üíé AmoCRM',
        showStackTraces: true
    };
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è —Å–µ—Å—Å–∏–∏
    const sessionId = Math.random().toString(36).substring(2, 15) + 
                      Math.random().toString(36).substring(2, 15);
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤
    let logStorage = [];
    let consoleOriginals = {
        log: console.log,
        info: console.info,
        warn: console.warn,
        error: console.error
    };
    
    // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    function formatTime() {
        const now = new Date();
        return now.toISOString();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    function getStack() {
        const stack = new Error().stack;
        if (!stack) return '';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–µ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        return stack.split('\n')
            .slice(3) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–∞–º–æ–º—É –ª–æ–≥–≥–µ—Ä—É
            .map(line => line.trim())
            .join('\n');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ localStorage
    function persistLogs() {
        if (!config.storeLogsInLocalStorage) return;
        
        try {
            // –û–±—Ä–µ–∑–∞–µ–º –ª–æ–≥ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if (logStorage.length > config.maxLogEntries) {
                logStorage = logStorage.slice(-config.maxLogEntries);
            }
            localStorage.setItem('amocrm_integration_logs', JSON.stringify(logStorage));
        } catch (e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è localStorage) –æ—á–∏—â–∞–µ–º –µ–≥–æ
            localStorage.removeItem('amocrm_integration_logs');
            logStorage = [createLogEntry(
                LOG_LEVELS.WARNING, 
                '–•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏', 
                {error: e.message}
            )];
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    function sendLogsToServer(entry) {
        if (!config.sendLogsToServer) return;
        
        try {
            fetch(config.logEndpoint, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    logs: [entry],
                    session_id: sessionId,
                    user_agent: navigator.userAgent,
                    timestamp: new Date().toISOString()
                }),
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º keepalive –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                keepalive: true
            }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
    function createLogEntry(level, message, context = {}, stack = '') {
        const entry = {
            timestamp: config.includeTimestamps ? formatTime() : undefined,
            level,
            levelName: Object.keys(LOG_LEVELS).find(key => LOG_LEVELS[key] === level) || 'UNKNOWN',
            message,
            context,
            url: window.location.href,
            session_id: sessionId
        };
        
        if (config.showStackTraces && stack) {
            entry.stack = stack;
        }
        
        return entry;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    function log(level, message, context = {}) {
        if (level < config.minLevel) return;
        
        const stack = config.showStackTraces ? getStack() : '';
        const entry = createLogEntry(level, message, context, stack);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        logStorage.push(entry);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        persistLogs();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        sendLogsToServer(entry);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        const levelStr = Object.keys(LOG_LEVELS).find(key => LOG_LEVELS[key] === level) || 'LOG';
        let prefix = `[${config.prefix}][${levelStr}]`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        if (config.coloredOutput) {
            const colors = {
                DEBUG: 'color: #6c757d',
                INFO: 'color: #17a2b8',
                WARNING: 'color: #ffc107',
                ERROR: 'color: #dc3545',
                CRITICAL: 'color: #fff; background-color: #dc3545'
            };
            
            const color = colors[levelStr] || 'color: inherit';
            prefix = `%c${prefix}`;
            
            switch (level) {
                case LOG_LEVELS.DEBUG:
                    consoleOriginals.log(prefix, color, message, context);
                    break;
                case LOG_LEVELS.INFO:
                    consoleOriginals.info(prefix, color, message, context);
                    break;
                case LOG_LEVELS.WARNING:
                    consoleOriginals.warn(prefix, color, message, context);
                    break;
                case LOG_LEVELS.ERROR:
                case LOG_LEVELS.CRITICAL:
                    consoleOriginals.error(prefix, color, message, context);
                    if (stack) consoleOriginals.error('%cStack Trace:', 'color: #dc3545', stack);
                    break;
            }
        } else {
            switch (level) {
                case LOG_LEVELS.DEBUG:
                    consoleOriginals.log(prefix, message, context);
                    break;
                case LOG_LEVELS.INFO:
                    consoleOriginals.info(prefix, message, context);
                    break;
                case LOG_LEVELS.WARNING:
                    consoleOriginals.warn(prefix, message, context);
                    break;
                case LOG_LEVELS.ERROR:
                case LOG_LEVELS.CRITICAL:
                    consoleOriginals.error(prefix, message, context);
                    if (stack) consoleOriginals.error('Stack Trace:', stack);
                    break;
            }
        }
        
        return entry;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    function logApiRequest(method, url, headers, data) {
        const sanitizedHeaders = {...headers};
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        if (sanitizedHeaders.Authorization) {
            if (typeof sanitizedHeaders.Authorization === 'string') {
                sanitizedHeaders.Authorization = sanitizedHeaders.Authorization.replace(
                    /(Bearer\s+)([a-zA-Z0-9\-_\.]+)/, 
                    '$1[HIDDEN_TOKEN]'
                );
            }
        }
        
        return log(LOG_LEVELS.DEBUG, `AmoCRM API Request: ${method} ${url}`, {
            method,
            url,
            headers: sanitizedHeaders,
            data: data ? JSON.stringify(data).substring(0, 500) : null
        });
    }
    
    function logApiResponse(url, status, response, time) {
        const level = status >= 400 ? LOG_LEVELS.ERROR : LOG_LEVELS.DEBUG;
        
        return log(level, `AmoCRM API Response: ${status} from ${url}`, {
            url,
            status,
            time: `${time}ms`,
            response: typeof response === 'object' ? 
                JSON.stringify(response).substring(0, 500) : 
                String(response).substring(0, 500)
        });
    }
    
    function logTokenState(token) {
        const now = Math.floor(Date.now() / 1000);
        const expiresAt = token.created_at + token.expires_in;
        const remainingSeconds = expiresAt - now;
        const isExpired = remainingSeconds <= 0;
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const maskedToken = {
            access_token: token.access_token ? 
                `${token.access_token.substring(0, 5)}...${token.access_token.substring(token.access_token.length - 5)}` : 
                null,
            refresh_token: token.refresh_token ? 
                `${token.refresh_token.substring(0, 5)}...${token.refresh_token.substring(token.refresh_token.length - 5)}` : 
                null,
            created_at: token.created_at,
            created_time: token.created_at ? new Date(token.created_at * 1000).toISOString() : null,
            expires_in: token.expires_in,
            expires_at: expiresAt,
            expires_time: expiresAt ? new Date(expiresAt * 1000).toISOString() : null,
            remaining_seconds: remainingSeconds,
            is_expired: isExpired,
            token_type: token.token_type
        };
        
        const level = isExpired ? LOG_LEVELS.WARNING : LOG_LEVELS.INFO;
        const message = isExpired ? 
            'AmoCRM —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' : 
            `AmoCRM —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–æ—Å—Ç–∞–ª–æ—Å—å ${Math.floor(remainingSeconds / 60)} –º–∏–Ω—É—Ç)`;
        
        return log(level, message, maskedToken);
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –ª–æ–≥–≥–µ—Ä–∞
    window.AmoLogger = {
        debug: (message, context) => log(LOG_LEVELS.DEBUG, message, context),
        info: (message, context) => log(LOG_LEVELS.INFO, message, context),
        warning: (message, context) => log(LOG_LEVELS.WARNING, message, context),
        error: (message, context) => log(LOG_LEVELS.ERROR, message, context),
        critical: (message, context) => log(LOG_LEVELS.CRITICAL, message, context),
        apiRequest: logApiRequest,
        apiResponse: logApiResponse,
        tokenState: logTokenState,
        getLogs: () => [...logStorage],
        clearLogs: () => {
            logStorage = [];
            if (config.storeLogsInLocalStorage) {
                localStorage.removeItem('amocrm_integration_logs');
            }
        },
        setLevel: (level) => {
            config.minLevel = level;
        }
    };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
        const savedLogs = localStorage.getItem('amocrm_integration_logs');
        if (savedLogs) {
            logStorage = JSON.parse(savedLogs);
        }
    } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    log(LOG_LEVELS.INFO, 'AmoCRM Enhanced Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
        session_id: sessionId,
        config
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    window.addEventListener('error', function(event) {
        log(LOG_LEVELS.ERROR, '–ù–µ–ø–æ–π–º–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript', {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: event.error ? event.error.toString() : null,
            stack: event.error && event.error.stack ? event.error.stack : null
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–π–º–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö Promise
    window.addEventListener('unhandledrejection', function(event) {
        log(LOG_LEVELS.ERROR, '–ù–µ–ø–æ–π–º–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise', {
            reason: event.reason ? event.reason.toString() : null,
            stack: event.reason && event.reason.stack ? event.reason.stack : null
        });
    });
})();
